<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
						xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
						xmlns:win="clr-namespace:EDictionary.Core.Styles.Utilities"
						xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">

	<win:WindowMinimizeCommand x:Key="MinimizeCommand"></win:WindowMinimizeCommand>
	<win:WindowMaximizeCommand x:Key="MaximizeCommand"></win:WindowMaximizeCommand>
	<win:WindowCloseCommand x:Key="CloseCommand"></win:WindowCloseCommand>

	<Style TargetType="{x:Type Image}" x:Key="WindowIcon">
		<Setter Property="Height" Value="25"/>
		<Setter Property="Width" Value="25"/>
	</Style>

	<!-- Minimize, Maximize, Close button on title bar -->
	<Style TargetType="{x:Type Button}" x:Key="WindowButton">
		<Setter Property="Height" Value="25"/>
		<Setter Property="Width" Value="25"/>
		<Setter Property="Background" Value="{StaticResource Dark2}"/>
		<Setter Property="Foreground" Value="{StaticResource Gray}"/>
		<Setter Property="VerticalAlignment" Value="Top"/>
		<Setter Property="HorizontalAlignment" Value="Right"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}">
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource LightGray}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" Value="{StaticResource White}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Foreground" Value="{StaticResource Gray}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Custom title bar, effects... -->
	<ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">

		<Grid Background="{StaticResource Black}">
			<Grid>

				<!-- Title bar and the rest of window -->
				<Grid.RowDefinitions>
					<RowDefinition Height="30"/>
					<RowDefinition Height="*"/>
				</Grid.RowDefinitions>

				<Grid Grid.Row="0" Margin="5,0,5,0">

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="auto"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="75"/>
					</Grid.ColumnDefinitions>

					<Label Grid.Column="0"
						win:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"
						win:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						Padding="0" VerticalContentAlignment="Center">
						<Image DockPanel.Dock="Left"
							Style="{StaticResource WindowIcon}"
							Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"
							Width="16"
							win:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
							win:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
					</Label>

					<Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}"
						VerticalContentAlignment="Center"
						HorizontalAlignment="Left"
						Foreground="{StaticResource White}"
						FontSize="14"
						win:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
						win:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ShowSystemMenuBehavior.RightButtonShow="true">
					</Label>

					<StackPanel Grid.Column="2" Orientation="Horizontal">
						<Button DockPanel.Dock="Right" VerticalAlignment="Center" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">▁</Button>
						<Button DockPanel.Dock="Right" VerticalAlignment="Center" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">☐</Button>
						<Button DockPanel.Dock="Right" VerticalAlignment="Center" Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">✕</Button>
					</StackPanel>
				</Grid>

				<Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
					<Grid>
						<AdornerDecorator>
							<ContentPresenter x:Name="WindowContent"/>
						</AdornerDecorator>
						<ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
					</Grid>
				</Border>
			</Grid>
		</Grid>
	</ControlTemplate>

	<!-- Custom title bar, effects... -->
	<ControlTemplate x:Key="PopupWindowTemplate" TargetType="{x:Type Window}">

		<Grid Background="{StaticResource Black}">
			<Grid>

				<!-- Title bar and the rest of window -->
				<Grid.RowDefinitions>
					<RowDefinition Height="30"/>
					<RowDefinition Height="*"/>
				</Grid.RowDefinitions>

				<Grid Grid.Row="0" Margin="5,0,5,0">

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="auto"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="75"/>
					</Grid.ColumnDefinitions>

					<Label Grid.Column="0"
						win:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"
						win:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						Padding="0">
					</Label>

					<Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}"
						VerticalContentAlignment="Center"
						HorizontalAlignment="Left"
						VerticalAlignment="Top"
						Foreground="{StaticResource White}"
						FontSize="14"
						win:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
						win:ShowSystemMenuBehavior.RightButtonShow="true">
					</Label>

					<Button Grid.Column="2"
							HorizontalAlignment="Right"
							VerticalAlignment="Center"
							Style="{StaticResource WindowButton}"
							Command="{StaticResource CloseCommand}"
							CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">✕</Button>
				</Grid>

				<Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
					<Grid>
						<AdornerDecorator>
							<ContentPresenter x:Name="WindowContent"/>
						</AdornerDecorator>
						<ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
					</Grid>
				</Border>
			</Grid>
		</Grid>
	</ControlTemplate>

	<Style TargetType="Window" x:Key="WindowBaseStyle">

		<Style.Resources>
			<Style TargetType="{x:Type Control}">
				<Setter Property="Foreground" Value="LightGray" />
			</Style>

			<Style TargetType="{x:Type Label}">
				<Setter Property="Foreground" Value="LightGray" />
			</Style>

			<Style TargetType="{x:Type RadioButton}">
				<Setter Property="Foreground" Value="LightGray" />
			</Style>
		</Style.Resources>
		 
		<Setter Property="WindowStyle" Value="None"/>
		<Setter Property="AllowsTransparency" Value="True"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{StaticResource Silver}"/>

		<!-- Fade in when window show up -->
		<Style.Triggers>
			<EventTrigger RoutedEvent="Window.Loaded">
				<BeginStoryboard>
					<Storyboard>
						<DoubleAnimation Storyboard.TargetProperty="(Window.Opacity)"
							From="0.0" To="1.0" Duration="0:0:0.2"
							AutoReverse="False"/>
					</Storyboard>
				</BeginStoryboard>
			</EventTrigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="Window" x:Key="ParentWindow" BasedOn="{StaticResource WindowBaseStyle}">
		<Setter Property="Background" Value="{StaticResource Black}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Dark}"/>
		<Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
	</Style>

	<Style TargetType="Window" x:Key="ChildWindow" BasedOn="{StaticResource WindowBaseStyle}">
		<Setter Property="Background" Value="{StaticResource Dark2}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Dark2}"/>
		<Setter Property="Template" Value="{StaticResource PopupWindowTemplate}"/>
	</Style>

</ResourceDictionary>
